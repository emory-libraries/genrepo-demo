.. _DEPLOYNOTES:

DEPLOYNOTES
===========

Installation
------------

Instructions to install required software and systems, configure the application,
and run various scripts to load initial data.

Software Dependencies
~~~~~~~~~~~~~~~~~~~~~

We recommend the use of `pip <http://pip.openplans.org/>`_ and `virtualenv
<http://virtualenv.openplans.org/>`_ for environment and dependency
management in this and other Python projects. If you don't have them
installed, you can get them with ``sudo easy_install pip`` and then ``sudo pip install
virtualenv``.

Setup the environment
~~~~~~~~~~~~~~~~~~~~~

When first installing this project, it is recommended to create a virtual environment
for it.  The virtualenv environment is a directory that can be installed anywhere you like,
perhaps adjacent to wherever the source code is deployed. To create your new environment,
simply run the virtualenv command::

  $ virtualenv --no-site-packages /home/genrepo/env

.. Note::
  For Apache/WSGI installations, you should run this command as the apache user.

Source the activation file to invoke your new virtual environment (this requires that you
use the bash shell)::

  $ . /home/genrepo/env/bin/activate

Once the environment has been activated inside a shell, Python programs
spawned from that shell will read their environment only from this
directory, not from the system-wide site packages. Installations will
correspondingly be installed into this environment.

.. Note::
  Installation instructions and upgrade notes below assume that
  you are already in an activated shell.

Install python dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~

genrepo depends on several python libraries. If you are using pip, you
can install all of the dependencies in an automated fashion that will
print status messages as packages are installed. If there are any
errors, pip should display messages indicating the problem.

To install python dependencies, cd into the repository checkout and::

  $ pip install -r pip-dependencies
  
.. Note:: 
  Some of the python dependencies require that certain that libraries
  be installed at the system level.  On Ubuntu or Debian systems, you
  can install them via::

    $ sudo apt-get install python-libxml2 python-lxml libxslt1-dev \
        libxslt1.1 libxml2 python-ldap libldap2-dev libsasl2-dev

genrepo requires a SQL database, but the type does not matter, so this
is not included in the pip-dependencies file.  You may want to pip
install ``MySQL-python`` or ``psycopg``, depending on the database you
plan to use.

If you are a developer or are installing to a continuous ingration server
where you plan to run unit tests, code coverage reports, or build sphinx
documentation, you probably will also want to run::

  $ pip install -r build-dependencies

Known Issues
^^^^^^^^^^^^

* As of 04/2011, installing **python-eulcore** from SVN via pip does not
  install the eulcore template themes correctly.  The easiest way to fix
  this is to manually create a symbolic link from the root of your
  virtualenv to the python-eulcore theme directory::

    $ cd /home/genrepo/env
    $ ln -s src/python-eulcore/themes/

-----

Install/Configure System Dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fedora
^^^^^^

The Keep expects to connect to a Fedora-Commons repository version
3.4.x.  Fedora should be configured as follows:

*  LDAP login filter

.. todo: document xacml policy setup required

Install the Application
~~~~~~~~~~~~~~~~~~~~~~~

Apache
^^^^^^

When deployed under Apache, we recommend the use of mod WSGI.  On
Ubuntu/Debian, you can install the apache2 modules with ``sudo apt-get
install libapache2-mod-wsgi`` .

After installing dependencies, copy and edit the sample wsgi and
apache configuration files in the apache directory inside the source code
checkout. Update all the paths to reflect the installation location
for virtualenv and the checked out code.

Configuration
^^^^^^^^^^^^^

Configure application settings by copying **localsettings.py.sample**
to **localsettings.py** and editing for local database, LDAP, Fedora,
PID manager, and key configuration.

.. NOTE::

  By default, this application should access the configured Fedora
  repository with **no** credentials, so **FEDORA_USER** and
  **FEDORA_PASSWORD** should not be defined in localsettings.py.  

PID Manager
^^^^^^^^^^^

Commenting out or removing any of the PIDMAN_* configuration options will
raise an error if the ``DEV_ENV`` setting is ``False`` (as is normal for a
production install). 

The configured PIDMAN_USER must have permission inside the pid
manager to add pids and targets.

----

After configuring all settings, initialize the db with all needed
tables and initial data using::

    $ python manage.py syncdb

Load Fedora fixtures and control objects to the configured repository
using::

     $ python manage.py syncrepo

Notes for Developers
~~~~~~~~~~~~~~~~~~~~

The project default Session configuration is set to mark cookies as
secure.  To enable login over HTTP (e.g. when developing with Django's
runserver), you will need to override this in your
``localsettings.py``.  See the commented out example in
``localsettings.py.sample``.

Test Setup
^^^^^^^^^^

Certain unit tests pass test user credentials to Fedora, in order to
test and simulate accessing Fedora as the logged in user.  For tests
to work properly, the unit test user should be defined (with
appropriate permissions) as a fedora account.  See
:mod:`genrepo.collection.tests` for account details.

Since the site is configured to access Fedora as a guest (no
credentials) by default, you should configure a Fedora test account
that has permission to load and remove test fixtures via
**FEDORA_TEST_USER** and **FEDORA_TEST_PASS** in ``localsettings.py``
and make use of these settings in your local tests where necessary.
